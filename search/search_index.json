{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to mahermap","text":"<p>a python pakage for mapping</p> <ul> <li>Free software: MIT license</li> <li>Documentation: https://Maherhassanali.github.io/mahermap</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the giswqs/pypackage project template.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/Maherhassanali/mahermap/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>mahermap could always use more documentation, whether as part of the official mahermap docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/Maherhassanali/mahermap/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up mahermap for local development.</p> <ol> <li> <p>Fork the mahermap repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/mahermap.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv mahermap\n$ cd mahermap/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 mahermap tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and     for PyPy. Check https://github.com/Maherhassanali/mahermap/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install mahermap, run this command in your terminal:</p> <pre><code>pip install mahermap\n</code></pre> <p>This is the preferred method to install mahermap, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for mahermap can be downloaded from the Github repo.</p> <p>You can clone the public repository:</p> <pre><code>git clone git://github.com/Maherhassanali/mahermap\n</code></pre>"},{"location":"mahermap/","title":"mahermap module","text":"<p>Main module.</p>"},{"location":"mahermap/#mahermap.mahermap.Map","title":"<code> Map            (Map)         </code>","text":"Source code in <code>mahermap/mahermap.py</code> <pre><code>class Map(ipyleaflet.Map):\n\n\n    def __init__(self, center=[25,32] , zoom=5 , ** kwargs) -&gt; None:\n        if \"scroll_wheel_zoom\" not in kwargs :\n            kwargs[\"scroll_wheel_zoom\"] =True\n\n\n        super().__init__(center=center,zoom=zoom,** kwargs)\n        if \"layers_control\" not in kwargs:\n            kwargs[\"layers_control\"] = True\n\n        if \"fullscreen\" not in kwargs:\n            kwargs[\"layers_control\"]=True\n\n        self.add_draw_control()\n        self.add_search_control()\n        self.add_layers_control()\n\n\n\n\n    def add_search_control(self, position=\"topleft\", **kwargs):\n\"\"\"Adds a search control to the map.\n\n        Args:\n            kwargs: Keyword arguments to pass to the search control.\n        \"\"\"\n        if \"url\" not in kwargs:\n            kwargs[\"url\"] = 'https://nominatim.openstreetmap.org/search?format=json&amp;q={s}'\n\n\n        search_control = ipyleaflet.SearchControl(position=position, **kwargs)\n        self.add_control(search_control)\n\n    def add_draw_control(self, **kwargs):\n\"\"\"Adds a draw control to the map.\n\n        Args:\n            kwargs: Keyword arguments to pass to the draw control.\n        \"\"\"\n        draw_control = ipyleaflet.DrawControl(**kwargs)\n\n        draw_control.polyline =  {\n            \"shapeOptions\": {\n                \"color\": \"#6bc2e5\",\n                \"weight\": 8,\n                \"opacity\": 1.0\n            }\n        }\n        draw_control.polygon = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#6be5c3\",\n                \"color\": \"#6be5c3\",\n                \"fillOpacity\": 1.0\n            },\n            \"drawError\": {\n                \"color\": \"#dd253b\",\n                \"message\": \"Oups!\"\n            },\n            \"allowIntersection\": False\n        }\n        draw_control.circle = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#efed69\",\n                \"color\": \"#efed69\",\n                \"fillOpacity\": 1.0\n            }\n        }\n        draw_control.rectangle = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#fca45d\",\n                \"color\": \"#fca45d\",\n                \"fillOpacity\": 1.0\n            }\n        }\n\n        self.add_control(draw_control)\n\n    def add_layers_control(self, position='topright'):\n\"\"\"Adds a layers control to the map.\n        Args:\n            kwargs: Keyword arguments to pass to the layers control.\n        \"\"\"\n        layers_control = ipyleaflet.LayersControl(position=position)\n        self.add_control(layers_control)\n\n    def add_fullscreen_control(self, position=\"bottomright\"):\n\"\"\"Adds a fullscreen control to the map.\n        Args:\n            kwargs: Keyword arguments to pass to the fullscreen control.\n        \"\"\"\n        fullscreen_control = ipyleaflet.FullScreenControl(position=position)\n        self.add_control(fullscreen_control)\n\n    def add_tile_layer(self, url, name=\"Google_maps\", attribution=\"\", **kwargs):\n\"\"\"Adds a tile layer to the map.\n        Args:\n            url (str): The URL of the tile layer.\n            name (str): The name of the tile layer.\n            attribution (str, optional): The attribution of the tile layer. Defaults to \"\".\n        \"\"\"\n        tile_layer = ipyleaflet.TileLayer(\n            url=url,\n            name=name,\n            attribution=attribution,\n            **kwargs\n        )\n        self.add_layer(tile_layer)\n    def add_basemap(self, basemap=\"satellite\", **kwargs):\n\n        import xyzservices.providers as xyz\n\n        if basemap.lower() == \"roadmap\":\n            url = 'http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name=basemap, **kwargs)\n        elif basemap.lower() == \"satellite\":\n            url = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name=basemap, **kwargs)\n        else:\n            try:\n                basemap = eval(f\"xyz.{basemap}\")\n                url = basemap.build_url()\n                attribution = basemap.attribution\n                self.add_tile_layer(url, name=basemap.name, attribution=attribution, **kwargs)\n            except:\n                raise ValueError(f\"Basemap '{basemap}' not found.\")\n\n    def add_geojson(self, data, name='GeoJSON', **kwargs):\n\"\"\"Adds a GeoJSON layer to the map.\n        Args:\n            data (dict): The GeoJSON data.\n        \"\"\"\n\n        if isinstance(data, str):\n            import json\n            with open(data, \"r\") as f:\n                data = json.load(f)\n\n        geojson = ipyleaflet.GeoJSON(data=data,name=name, **kwargs)\n        self.add_layer(geojson)\n\n    def add_shp(self, data, name='Shapefile', **kwargs):\n\"\"\"Adds a Shapefile layer to the map.\n        Args:\n            data (str): The path to the Shapefile.\n        \"\"\"\n        import geopandas as gpd\n        gdf = gpd.read_file(data)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, name=name, **kwargs)\n</code></pre>"},{"location":"mahermap/#mahermap.mahermap.Map.add_draw_control","title":"<code>add_draw_control(self, **kwargs)</code>","text":"<p>Adds a draw control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>Keyword arguments to pass to the draw control.</p> <code>{}</code> Source code in <code>mahermap/mahermap.py</code> <pre><code>def add_draw_control(self, **kwargs):\n\"\"\"Adds a draw control to the map.\n\n    Args:\n        kwargs: Keyword arguments to pass to the draw control.\n    \"\"\"\n    draw_control = ipyleaflet.DrawControl(**kwargs)\n\n    draw_control.polyline =  {\n        \"shapeOptions\": {\n            \"color\": \"#6bc2e5\",\n            \"weight\": 8,\n            \"opacity\": 1.0\n        }\n    }\n    draw_control.polygon = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#6be5c3\",\n            \"color\": \"#6be5c3\",\n            \"fillOpacity\": 1.0\n        },\n        \"drawError\": {\n            \"color\": \"#dd253b\",\n            \"message\": \"Oups!\"\n        },\n        \"allowIntersection\": False\n    }\n    draw_control.circle = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#efed69\",\n            \"color\": \"#efed69\",\n            \"fillOpacity\": 1.0\n        }\n    }\n    draw_control.rectangle = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#fca45d\",\n            \"color\": \"#fca45d\",\n            \"fillOpacity\": 1.0\n        }\n    }\n\n    self.add_control(draw_control)\n</code></pre>"},{"location":"mahermap/#mahermap.mahermap.Map.add_fullscreen_control","title":"<code>add_fullscreen_control(self, position='bottomright')</code>","text":"<p>Adds a fullscreen control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>Keyword arguments to pass to the fullscreen control.</p> required Source code in <code>mahermap/mahermap.py</code> <pre><code>def add_fullscreen_control(self, position=\"bottomright\"):\n\"\"\"Adds a fullscreen control to the map.\n    Args:\n        kwargs: Keyword arguments to pass to the fullscreen control.\n    \"\"\"\n    fullscreen_control = ipyleaflet.FullScreenControl(position=position)\n    self.add_control(fullscreen_control)\n</code></pre>"},{"location":"mahermap/#mahermap.mahermap.Map.add_geojson","title":"<code>add_geojson(self, data, name='GeoJSON', **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>The GeoJSON data.</p> required Source code in <code>mahermap/mahermap.py</code> <pre><code>def add_geojson(self, data, name='GeoJSON', **kwargs):\n\"\"\"Adds a GeoJSON layer to the map.\n    Args:\n        data (dict): The GeoJSON data.\n    \"\"\"\n\n    if isinstance(data, str):\n        import json\n        with open(data, \"r\") as f:\n            data = json.load(f)\n\n    geojson = ipyleaflet.GeoJSON(data=data,name=name, **kwargs)\n    self.add_layer(geojson)\n</code></pre>"},{"location":"mahermap/#mahermap.mahermap.Map.add_layers_control","title":"<code>add_layers_control(self, position='topright')</code>","text":"<p>Adds a layers control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>Keyword arguments to pass to the layers control.</p> required Source code in <code>mahermap/mahermap.py</code> <pre><code>def add_layers_control(self, position='topright'):\n\"\"\"Adds a layers control to the map.\n    Args:\n        kwargs: Keyword arguments to pass to the layers control.\n    \"\"\"\n    layers_control = ipyleaflet.LayersControl(position=position)\n    self.add_control(layers_control)\n</code></pre>"},{"location":"mahermap/#mahermap.mahermap.Map.add_search_control","title":"<code>add_search_control(self, position='topleft', **kwargs)</code>","text":"<p>Adds a search control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>Keyword arguments to pass to the search control.</p> <code>{}</code> Source code in <code>mahermap/mahermap.py</code> <pre><code>def add_search_control(self, position=\"topleft\", **kwargs):\n\"\"\"Adds a search control to the map.\n\n    Args:\n        kwargs: Keyword arguments to pass to the search control.\n    \"\"\"\n    if \"url\" not in kwargs:\n        kwargs[\"url\"] = 'https://nominatim.openstreetmap.org/search?format=json&amp;q={s}'\n\n\n    search_control = ipyleaflet.SearchControl(position=position, **kwargs)\n    self.add_control(search_control)\n</code></pre>"},{"location":"mahermap/#mahermap.mahermap.Map.add_shp","title":"<code>add_shp(self, data, name='Shapefile', **kwargs)</code>","text":"<p>Adds a Shapefile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The path to the Shapefile.</p> required Source code in <code>mahermap/mahermap.py</code> <pre><code>def add_shp(self, data, name='Shapefile', **kwargs):\n\"\"\"Adds a Shapefile layer to the map.\n    Args:\n        data (str): The path to the Shapefile.\n    \"\"\"\n    import geopandas as gpd\n    gdf = gpd.read_file(data)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, name=name, **kwargs)\n</code></pre>"},{"location":"mahermap/#mahermap.mahermap.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name='Google_maps', attribution='', **kwargs)</code>","text":"<p>Adds a tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the tile layer.</p> required <code>name</code> <code>str</code> <p>The name of the tile layer.</p> <code>'Google_maps'</code> <code>attribution</code> <code>str</code> <p>The attribution of the tile layer. Defaults to \"\".</p> <code>''</code> Source code in <code>mahermap/mahermap.py</code> <pre><code>def add_tile_layer(self, url, name=\"Google_maps\", attribution=\"\", **kwargs):\n\"\"\"Adds a tile layer to the map.\n    Args:\n        url (str): The URL of the tile layer.\n        name (str): The name of the tile layer.\n        attribution (str, optional): The attribution of the tile layer. Defaults to \"\".\n    \"\"\"\n    tile_layer = ipyleaflet.TileLayer(\n        url=url,\n        name=name,\n        attribution=attribution,\n        **kwargs\n    )\n    self.add_layer(tile_layer)\n</code></pre>"},{"location":"mahermap/#mahermap.mahermap.generate_random_string","title":"<code>generate_random_string(length=5)</code>","text":"<p>Generate a random string of length  enter the length of the string to generate the random string</p> <p>Returns:</p> Type Description <p>string of length you entered</p> Source code in <code>mahermap/mahermap.py</code> <pre><code>def generate_random_string(length=5):\n\n\"\"\"\n    Generate a random string of length \n    **enter the length of the string to generate the random string**\n\n    Returns:\n        string of length you entered\n    \"\"\"    \n    letters = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation\n    return ''.join(random.choice(letters) for i in range(length))\n</code></pre>"},{"location":"mahermap/#mahermap.mahermap.the_name","title":"<code>the_name(name)</code>","text":"<p>write the name</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>string</code> <p>just write the name you want </p> required Source code in <code>mahermap/mahermap.py</code> <pre><code>def the_name(name):\n\"\"\"write the name\n\n    Args:\n        name (string): just write the name you want \n        for testing\n    \"\"\"    \n    print(name)\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use mahermap in a project:</p> <pre><code>import mahermap\n</code></pre>"},{"location":"examples/folim/","title":"Folim","text":"In\u00a0[7]: Copied! <pre>import folium\n</pre> import folium In\u00a0[10]: Copied! <pre>m = folium.Map(location=[31.062, 30.685])\n</pre>  m = folium.Map(location=[31.062, 30.685]) In\u00a0[11]: Copied! <pre>m\n</pre> m Out[11]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[\u00a0]: Copied! <pre>from mahermap import *\n</pre> from mahermap import * In\u00a0[4]: Copied! <pre>mahermap.generate_random_string(19)\n</pre> mahermap.generate_random_string(19)  Out[4]: <pre>'|U+x/r?BfCmiN#alZS='</pre> In\u00a0[3]: Copied! <pre>mahermap.the_name(\"ii\")\n</pre> mahermap.the_name(\"ii\") <pre>ii\n</pre>"},{"location":"examples/ipyleaflet/","title":"Ipyleaflet","text":"In\u00a0[2]: Copied! <pre>from ipyleaflet import Map, basemaps, basemap_to_tiles\n\nm = Map(\n    basemap=basemap_to_tiles(basemaps.NASAGIBS.ModisTerraTrueColorCR, \"2022-04-08\"),\n    center=(52.204793, 360.121558),\n    zoom=4\n)\n\nm\n</pre> from ipyleaflet import Map, basemaps, basemap_to_tiles  m = Map(     basemap=basemap_to_tiles(basemaps.NASAGIBS.ModisTerraTrueColorCR, \"2022-04-08\"),     center=(52.204793, 360.121558),     zoom=4 )  m Out[2]: <pre>Map(center=[52.204793, 360.121558], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title'\u2026</pre> In\u00a0[3]: Copied! <pre>m = Map(\n    basemap=basemap_to_tiles(basemaps.OpenTopoMap),\n    center=(52.204793, 360.121558),\n    zoom=4\n)\n\nm\n</pre> m = Map(     basemap=basemap_to_tiles(basemaps.OpenTopoMap),     center=(52.204793, 360.121558),     zoom=4 )  m Out[3]: <pre>Map(center=[52.204793, 360.121558], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title'\u2026</pre>"},{"location":"examples/mahermap/","title":"Mahermap","text":"In\u00a0[2]: Copied! <pre>import mahermap\n\n\n#the wite glove coordinate\nm = mahermap.Map(center=[31.102783522593665, 30.643756150123327],zoom=10,)\n\nm.add_search_control(position='topright',zoom=10)\nm.add_draw_control()\nm\n</pre> import mahermap   #the wite glove coordinate m = mahermap.Map(center=[31.102783522593665, 30.643756150123327],zoom=10,)  m.add_search_control(position='topright',zoom=10) m.add_draw_control() m <pre>{'scroll_wheel_zoom': True}\n</pre> Out[2]: <pre>Map(center=[31.102783522593665, 30.643756150123327], controls=(ZoomControl(options=['position', 'zoom_in_text'\u2026</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/test/","title":"Test","text":"In\u00a0[\u00a0]: Copied! <pre>import mahermap\n</pre> import mahermap In\u00a0[\u00a0]: Copied! <pre>m=mahermap.Map()\n</pre> m=mahermap.Map()  In\u00a0[\u00a0]: Copied! <pre>#m.add_basemap()\n</pre> #m.add_basemap()  In\u00a0[\u00a0]: Copied! <pre>import xyzservices.providers as xyz\nurl=xyz.Esri.WorldImagery.build_url()\n</pre> import xyzservices.providers as xyz url=xyz.Esri.WorldImagery.build_url()   In\u00a0[\u00a0]: Copied! <pre>m.add_tile_layer(url=url, name=\"ESRI\")\nm\n</pre> m.add_tile_layer(url=url, name=\"ESRI\") m In\u00a0[\u00a0]: Copied! <pre>m.add_geojson(\"H:\\GEO\\maher\\mahermap\\docs\\examples\\map.geojson\")\nm\n</pre> m.add_geojson(\"H:\\GEO\\maher\\mahermap\\docs\\examples\\map.geojson\") m  In\u00a0[\u00a0]: Copied! <pre>m.add_shp(\" C:\\Users\\maher\\Desktop\\o11\\egypt_location\\egypt_location.shp\")\nm\n</pre> m.add_shp(\" C:\\Users\\maher\\Desktop\\o11\\egypt_location\\egypt_location.shp\") m"}]}